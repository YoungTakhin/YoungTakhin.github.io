{"title":"Java208道经典面试题目一. Java基础","date":"2019-09-15T09:17:18.000Z","date_formatted":{"ll":"2019年9月15日","L":"2019/09/15","MM-DD":"09-15"},"color":"#EBF8FF","link":"2019/09/15/Java208道经典面试题目一-Java基础","comments":true,"tags":["Java"],"categories":["Java208道经典面试题目"],"updated":"2019-12-03T08:01:55.683Z","content":"<h1 id=\"Java208道经典面试题目一-Java基础\">Java208道经典面试题目一. Java基础<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#Java208道经典面试题目一-Java基础\"></a></h1><h2 id=\"1-JDK-和-JRE-有什么区别？\">1. JDK 和 JRE 有什么区别？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#1-JDK-和-JRE-有什么区别？\"></a></h2><ul>\n<li>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</li>\n<li>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。</li>\n</ul>\n<p>具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。</p>\n<h2 id=\"2-和-equals-的区别是什么？\">2. == 和 equals 的区别是什么？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#2-和-equals-的区别是什么？\"></a></h2><p><strong>==解读</strong></p>\n<p>对于基本类型和引用类型 == 的作用效果是不同的，如下所示：</p>\n<ul>\n<li>基本类型：比较的是值是否相同；</li>\n<li>引用类型：比较的是引用是否相同；</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String x = <span class=\"string\">\"string\"</span>;</span><br><span class=\"line\">String y = <span class=\"string\">\"string\"</span>;</span><br><span class=\"line\">String z = <span class=\"keyword\">new</span> String(<span class=\"string\">\"string\"</span>);</span><br><span class=\"line\">System.out.println(x==y); <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(x==z); <span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(x.equals(y)); <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(x.equals(z)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>代码解读：</p>\n<p>因为 x 和 y 指向的是同一个引用，所以 == 也是 true，而 new String()方法则重写开辟了内存空间，所以 == 结果为 false，而 equals 比较的一直是值，所以结果都为 true。</p>\n<p><strong>equals 解读</strong></p>\n<p>equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。看下面的代码就明白了。</p>\n<p>首先来看默认情况下 equals 比较一个有相同值的对象，代码如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Cat c1 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">\"王磊\"</span>);</span><br><span class=\"line\">Cat c2 = <span class=\"keyword\">new</span> Cat(<span class=\"string\">\"王磊\"</span>);</span><br><span class=\"line\">System.out.println(c1.equals(c2)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></div></figure>\n\n<p>输出结果出乎我们的意料，竟然是 false？这是怎么回事，看了 equals 源码就知道了，源码如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span> == obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>原来 equals 本质上就是 ==。</p>\n<p>那问题来了，两个相同值的 String 对象，为什么返回的是 true？代码如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"老王\"</span>);</span><br><span class=\"line\">String s2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"老王\"</span>);</span><br><span class=\"line\">System.out.println(s1.equals(s2)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>同样的，当我们进入 String 的 equals 方法，找到了答案，代码如下：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == anObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        String anotherString = (String)anObject;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = value.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> v1[] = value;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1[i] != v2[i])</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>原来是 String 重写了 Object 的 equals 方法，把引用比较改成了值比较。</p>\n<p><strong>总结：</strong></p>\n<p>== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重新了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。</p>\n<h2 id=\"3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？\">3. 两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？\"></a></h2><p>不对，两个对象的 hashCode()相同，equals()不一定 true。</p>\n<p>代码示例：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1 = <span class=\"string\">\"通话\"</span>;</span><br><span class=\"line\">String str2 = <span class=\"string\">\"重地\"</span>;</span><br><span class=\"line\">System.out.println(String.format(<span class=\"string\">\"str1：%d | str2：%d\"</span>, </span><br><span class=\"line\">                     str1.hashCode(),str2.hashCode()));</span><br><span class=\"line\">System.out.println(str1.equals(str2));</span><br></pre></td></tr></table></div></figure>\n\n<p>执行的结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str1：1179395 | str2：1179395</span><br><span class=\"line\">false</span><br></pre></td></tr></table></div></figure>\n\n<p>代码解读：</p>\n<p>很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。</p>\n<h2 id=\"4-final-在-java-中有什么作用？\">4. final 在 java 中有什么作用？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#4-final-在-java-中有什么作用？\"></a></h2><ul>\n<li>final 修饰的类叫最终类，该类不能被继承。</li>\n<li>final 修饰的方法不能被重写。</li>\n<li>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</li>\n</ul>\n<h2 id=\"5-java-中的-Math-round-1-5-等于多少？\">5. java 中的 Math.round(-1.5) 等于多少？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#5-java-中的-Math-round-1-5-等于多少？\"></a></h2><p>等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。</p>\n<h2 id=\"6-String-属于基础的数据类型吗？\">6. String 属于基础的数据类型吗？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#6-String-属于基础的数据类型吗？\"></a></h2><p>String 不属于基础类型，基础类型有 8 种：</p>\n<p>byte、boolean、char、short、int、float、long、double，而 String 属于对象。</p>\n<h2 id=\"7-java-中操作字符串都有哪些类？它们之间有什么区别？\">7. java 中操作字符串都有哪些类？它们之间有什么区别？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#7-java-中操作字符串都有哪些类？它们之间有什么区别？\"></a></h2><p>操作字符串的类有：String、StringBuffer、StringBuilder。</p>\n<p>String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。</p>\n<p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。</p>\n<h2 id=\"8-String-str-”i”与-String-str-new-String-“i”-一样吗？\">8. String str=”i”与 String str=new String(“i”)一样吗？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#8-String-str-”i”与-String-str-new-String-“i”-一样吗？\"></a></h2><p>不一样，因为内存的分配方式不一样。String str=”i”的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(“i”) 则会被分到堆内存中。</p>\n<h2 id=\"9-如何将字符串反转？\">9. 如何将字符串反转？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#9-如何将字符串反转？\"></a></h2><p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p>\n<p>示例代码：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringBuffer reverse</span></span><br><span class=\"line\">StringBuffer stringBuffer = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">stringBuffer.append(<span class=\"string\">\"abcdefg\"</span>);</span><br><span class=\"line\">System.out.println(stringBuffer.reverse()); <span class=\"comment\">// gfedcba</span></span><br><span class=\"line\"><span class=\"comment\">// StringBuilder reverse</span></span><br><span class=\"line\">StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">stringBuilder.append(<span class=\"string\">\"abcdefg\"</span>);</span><br><span class=\"line\">System.out.println(stringBuilder.reverse()); <span class=\"comment\">// gfedcba</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"10-String-类的常用方法都有那些？\">10. String 类的常用方法都有那些？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#10-String-类的常用方法都有那些？\"></a></h2><ul>\n<li>indexOf()：返回指定字符的索引。</li>\n<li>charAt()：返回指定索引处的字符。</li>\n<li>replace()：字符串替换。</li>\n<li>trim()：去除字符串两端空白。</li>\n<li>split()：分割字符串，返回一个分割后的字符串数组。</li>\n<li>getBytes()：返回字符串的 byte 类型数组。</li>\n<li>length()：返回字符串长度。</li>\n<li>toLowerCase()：将字符串转成小写字母。</li>\n<li>toUpperCase()：将字符串转成大写字符。</li>\n<li>substring()：截取字符串。</li>\n<li>equals()：字符串比较。</li>\n</ul>\n<h2 id=\"11-抽象类必须要有抽象方法吗？\">11. 抽象类必须要有抽象方法吗？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#11-抽象类必须要有抽象方法吗？\"></a></h2><p>不需要，抽象类不一定非要有抽象方法。</p>\n<p>示例代码：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"hi~\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码，抽象类并没有抽象方法但完全可以正常运行。</p>\n<h2 id=\"12-普通类和抽象类有哪些区别？\">12. 普通类和抽象类有哪些区别？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#12-普通类和抽象类有哪些区别？\"></a></h2><ul>\n<li>普通类不能包含抽象方法，抽象类可以包含抽象方法。</li>\n<li>抽象类不能直接实例化，普通类可以直接实例化。</li>\n</ul>\n<h2 id=\"13-抽象类能使用-final-修饰吗？\">13. 抽象类能使用 final 修饰吗？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#13-抽象类能使用-final-修饰吗？\"></a></h2><p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，如下图所示，编辑器也会提示错误信息：</p>\n<p><img src=\"https://img-1257398142.cos.ap-guangzhou.myqcloud.com/final.webp\" alt=\"Image text\" class=\"article-img\"></p>\n<h2 id=\"14-接口和抽象类有什么区别？\">14. 接口和抽象类有什么区别？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#14-接口和抽象类有什么区别？\"></a></h2><ul>\n<li>实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。</li>\n<li>构造函数：抽象类可以有构造函数；接口不能有。</li>\n<li>main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。  </li>\n<li>实现数量：类可以实现很多个接口；但是只能继承一个抽象类。 </li>\n<li>访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</li>\n</ul>\n<h2 id=\"15-java-中-IO-流分为几种？\">15. java 中 IO 流分为几种？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#15-java-中-IO-流分为几种？\"></a></h2><p>按功能来分：输入流（input）、输出流（output）。</p>\n<p>按类型来分：字节流和字符流。</p>\n<p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p>\n<h2 id=\"16-BIO、NIO、AIO-有什么区别？\">16. BIO、NIO、AIO 有什么区别？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#16-BIO、NIO、AIO-有什么区别？\"></a></h2><ul>\n<li>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。 </li>\n<li>NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</li>\n<li>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</li>\n</ul>\n<h2 id=\"17-Files的常用方法都有哪些？\">17. Files的常用方法都有哪些？<a href=\"2019/09/15/Java208道经典面试题目一-Java基础#17-Files的常用方法都有哪些？\"></a></h2><ul>\n<li>Files.exists()：检测文件路径是否存在。</li>\n<li>Files.createFile()：创建文件。</li>\n<li>Files.createDirectory()：创建文件夹。</li>\n<li>Files.delete()：删除一个文件或目录。</li>\n<li>Files.copy()：复制文件。</li>\n<li>Files.move()：移动文件。</li>\n<li>Files.size()：查看文件个数。</li>\n<li>Files.read()：读取文件。</li>\n<li>Files.write()：写入文件。</li>\n</ul>\n<hr>\n","prev":{"title":"Java208道经典面试题目二. 容器","link":"2019/09/16/Java208道经典面试题目二-容器"},"plink":"https://alpac.top/2019/09/15/Java208道经典面试题目一-Java基础/","toc":[{"title":"Java208道经典面试题目一. Java基础","id":"Java208道经典面试题目一-Java基础","index":"1","children":[{"title":"1. JDK 和 JRE 有什么区别？","id":"1-JDK-和-JRE-有什么区别？","index":"1.1"},{"title":"2. == 和 equals 的区别是什么？","id":"2-和-equals-的区别是什么？","index":"1.2"},{"title":"3. 两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？","id":"3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？","index":"1.3"},{"title":"4. final 在 java 中有什么作用？","id":"4-final-在-java-中有什么作用？","index":"1.4"},{"title":"5. java 中的 Math.round(-1.5) 等于多少？","id":"5-java-中的-Math-round-1-5-等于多少？","index":"1.5"},{"title":"6. String 属于基础的数据类型吗？","id":"6-String-属于基础的数据类型吗？","index":"1.6"},{"title":"7. java 中操作字符串都有哪些类？它们之间有什么区别？","id":"7-java-中操作字符串都有哪些类？它们之间有什么区别？","index":"1.7"},{"title":"8. String str=”i”与 String str=new String(“i”)一样吗？","id":"8-String-str-”i”与-String-str-new-String-“i”-一样吗？","index":"1.8"},{"title":"9. 如何将字符串反转？","id":"9-如何将字符串反转？","index":"1.9"},{"title":"10. String 类的常用方法都有那些？","id":"10-String-类的常用方法都有那些？","index":"1.10"},{"title":"11. 抽象类必须要有抽象方法吗？","id":"11-抽象类必须要有抽象方法吗？","index":"1.11"},{"title":"12. 普通类和抽象类有哪些区别？","id":"12-普通类和抽象类有哪些区别？","index":"1.12"},{"title":"13. 抽象类能使用 final 修饰吗？","id":"13-抽象类能使用-final-修饰吗？","index":"1.13"},{"title":"14. 接口和抽象类有什么区别？","id":"14-接口和抽象类有什么区别？","index":"1.14"},{"title":"15. java 中 IO 流分为几种？","id":"15-java-中-IO-流分为几种？","index":"1.15"},{"title":"16. BIO、NIO、AIO 有什么区别？","id":"16-BIO、NIO、AIO-有什么区别？","index":"1.16"},{"title":"17. Files的常用方法都有哪些？","id":"17-Files的常用方法都有哪些？","index":"1.17"}]}],"reward":true,"copyright":{"author":"Yang Dexuan","link":"<a href=\"https://alpac.top/2019/09/15/Java208道经典面试题目一-Java基础/\" title=\"Java208道经典面试题目一. Java基础\">https://alpac.top/2019/09/15/Java208道经典面试题目一-Java基础/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}