{"title":"设计模式6 抽象工厂模式","date":"2019-12-03T02:21:55.000Z","date_formatted":{"ll":"2019年12月3日","L":"2019/12/03","MM-DD":"12-03"},"link":"2019/12/03/设计模式6抽象工厂模式","comments":true,"tags":["设计模式"],"categories":["设计模式"],"updated":"2019-12-03T03:22:12.456Z","content":"<h1 id=\"设计模式6-抽象工厂模式\">设计模式6 抽象工厂模式<a href=\"2019/12/03/设计模式6抽象工厂模式#设计模式6-抽象工厂模式\"></a></h1><p>抽象工厂模式(Abstract Factory Pattern)，也称为Kit模式，属于对象创建型模式。</p>\n<h2 id=\"抽象工厂模式定义\">抽象工厂模式定义<a href=\"2019/12/03/设计模式6抽象工厂模式#抽象工厂模式定义\"></a></h2><ul>\n<li><p>抽象工厂模式：</p>\n<p>提供一个创建一系列相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p>\n<p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。</p>\n</li>\n<li><p>抽象工厂模式特点：</p>\n<p>“开闭原则”的倾斜性：<strong>“开闭原则”要求系统对扩展开放，对修改封闭，通过扩展达到增强其功能的目的。</strong>对于涉及到多个产品族与多个产品等级结构的系统，其功能增强包括两方面：</p>\n<ul>\n<li>增加产品族：对于增加新的产品族，工厂方法模式很好的支持了“开闭原则”，对于新增加的产品族，只需要对应增加一个新的具体工厂即可，对已有代码无须做任何修改。</li>\n<li>增加新的产品等级结构：对于增加新的产品等级结构，需要修改所有的工厂角色，包括抽象工厂类，在所有的工厂类中都需要增加生产新产品的方法，不能很好地支持“开闭原则”。</li>\n</ul>\n<p>抽象工厂模式的这种性质称为<strong>“开闭原则”的倾斜性</strong>，抽象工厂模式以一种倾斜的方式支持增加新的产品，它为新产品族的增加提供方便，但不能为新的产品等级结构的增加提供这样的方便。</p>\n</li>\n<li><p>抽象工厂模式优缺点：</p>\n<p>优点：</p>\n<ul>\n<li>可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。</li>\n<li>当增加一个新的产品族时不需要修改原代码，满足开闭原则。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"抽象工厂模式结构\">抽象工厂模式结构<a href=\"2019/12/03/设计模式6抽象工厂模式#抽象工厂模式结构\"></a></h2><ul>\n<li><p>工厂方法模式主要包括以下主要角色：</p>\n<ul>\n<li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法 newProduct()，可以创建多个不同等级的产品。</li>\n<li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li>\n<li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li>\n<li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系。</li>\n</ul>\n</li>\n<li><p>工厂方法模式类图：</p>\n<p><img src=\"https://s2.ax1x.com/2019/12/03/QKy1RU.png\" alt=\"抽象工厂模式\" class=\"article-img\"></p>\n</li>\n</ul>\n<h2 id=\"抽象工厂模式实现方法\">抽象工厂模式实现方法<a href=\"2019/12/03/设计模式6抽象工厂模式#抽象工厂模式实现方法\"></a></h2><p>抽象工厂模式的结构同工厂方法模式的结构相似，不同的是其产品的种类不止一个，所以创建产品的方法也不止一个。</p>\n<p>下面只给出抽象工厂和具体工厂的代码：</p>\n<ul>\n<li><p>抽象工厂类</p>\n<p>抽象工厂提供了不同产品的生成方法：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProductA <span class=\"title\">newProductA</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProductB <span class=\"title\">newProductB</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>具体工厂类</p>\n<p>具体工厂实现了不同产品的生成方法：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory1</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProductA <span class=\"title\">newProductA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"具体工厂1生成--&gt;具体产品A1...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductA1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProductB <span class=\"title\">newProductB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"具体工厂1生成--&gt;具体产品B1...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductB1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory2</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProductA <span class=\"title\">newProductA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"具体工厂2生成--&gt;具体产品A2...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductA2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ProductB <span class=\"title\">newProductB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"具体工厂2生成--&gt;具体产品B2...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductB2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ul>\n<h2 id=\"抽象工厂模式扩展\">抽象工厂模式扩展<a href=\"2019/12/03/设计模式6抽象工厂模式#抽象工厂模式扩展\"></a></h2><ul>\n<li>当抽象工厂模式中每一个具体工厂类只创建一个产品对象，也就是只存在一个产品等级结构时，抽象工厂模式退化成<strong>工厂方法模式</strong>。</li>\n<li>当工厂方法模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，工厂方法模式退化成<strong>简单工厂模式</strong>。</li>\n</ul>\n","next":{"title":"设计模式5 工厂方法模式","link":"2019/12/02/设计模式5工厂方法模式"},"plink":"https://youngtakhin.github.io/youngtakhin.github.io/2019/12/03/设计模式6抽象工厂模式/","toc":[{"title":"设计模式6 抽象工厂模式","id":"设计模式6-抽象工厂模式","index":"1","children":[{"title":"抽象工厂模式定义","id":"抽象工厂模式定义","index":"1.1"},{"title":"抽象工厂模式结构","id":"抽象工厂模式结构","index":"1.2"},{"title":"抽象工厂模式实现方法","id":"抽象工厂模式实现方法","index":"1.3"},{"title":"抽象工厂模式扩展","id":"抽象工厂模式扩展","index":"1.4"}]}],"reward":true,"copyright":{"author":"Yang Dexuan","link":"<a href=\"https://youngtakhin.github.io/youngtakhin.github.io/2019/12/03/设计模式6抽象工厂模式/\" title=\"设计模式6 抽象工厂模式\">https://youngtakhin.github.io/youngtakhin.github.io/2019/12/03/设计模式6抽象工厂模式/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}