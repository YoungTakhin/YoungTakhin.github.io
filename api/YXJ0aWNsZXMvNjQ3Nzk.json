{"title":"设计模式4 原型模式","date":"2019-11-28T08:32:46.000Z","date_formatted":{"ll":"2019年11月28日","L":"2019/11/28","MM-DD":"11-28"},"color":"#EBF8FF","link":"articles/64779","comments":true,"tags":["设计模式"],"categories":["设计模式"],"updated":"2019-12-26T16:01:56.384Z","content":"<h1 id=\"设计模式4-原型模式\">设计模式4 原型模式<a href=\"articles/64779#设计模式4-原型模式\"></a></h1><p>原型模式（Prototype Pattern）是一种对象创建型模式。</p>\n<h2 id=\"原型模式定义\">原型模式定义<a href=\"articles/64779#原型模式定义\"></a></h2><p>原型模式实现了一个原型接口，并用其实例作为原型，通过克隆该原型对象来创建一个和原型相同或相似的新对象。原型实例指定了要创建的对象的种类。用这种方式创建对象非常高效，根本无须知道对象创建的细节。</p>\n<h2 id=\"原型模式结构\">原型模式结构<a href=\"articles/64779#原型模式结构\"></a></h2><ul>\n<li><p>原型模式主要包括以下主要角色：</p>\n<ul>\n<li>原型接口/抽象原型类</li>\n<li>具体原型类</li>\n<li>访问类</li>\n</ul>\n</li>\n<li><p>原型模式类图：</p>\n<p><img src=\"https://s2.ax1x.com/2019/12/02/QnUGxP.png\" alt=\"原型模式\" class=\"article-img\"></p>\n</li>\n</ul>\n<h2 id=\"原型模式实现方法\">原型模式实现方法<a href=\"articles/64779#原型模式实现方法\"></a></h2><ul>\n<li><p>原型接口/抽象原型类</p>\n<p>原型模式的克隆分为<strong>浅克隆</strong>和<strong>深克隆</strong>，Java 中的 Object 类提供了浅克隆的 clone() 方法，具体原型类只要实现 Cloneable 接口就可实现对象的浅克隆，这里的 Cloneable 接口就是抽象原型类</p>\n</li>\n<li><p>具体原型类</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Realizetype</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\">    Realizetype() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Realizetype)<span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>访问类</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class=\"line\">        Realizetype obj1 = <span class=\"keyword\">new</span> Realizetype();</span><br><span class=\"line\">        Realizetype obj2 = (Realizetype)obj1.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ul>\n<h2 id=\"原型模式扩展\">原型模式扩展<a href=\"articles/64779#原型模式扩展\"></a></h2><p>原型模式可扩展为带原型管理器的原型模式，它在原型模式的基础上增加了一个原型管理器 PrototypeManager 类。该类用 HashMap 保存多个复制的原型，Client 类可以通过管理器的 get(String id) 方法从中获取复制的原型。</p>\n<p><img src=\"https://s2.ax1x.com/2019/12/02/QnUDGn.png\" alt=\"带原型管理器的原型模式\" class=\"article-img\"></p>\n","prev":{"title":"设计模式5 工厂方法模式","link":"articles/57053"},"next":{"title":"设计模式3 单例模式","link":"articles/54829"},"plink":"http://alpac.top/articles/64779/","toc":[{"title":"设计模式4 原型模式","id":"设计模式4-原型模式","index":"1","children":[{"title":"原型模式定义","id":"原型模式定义","index":"1.1"},{"title":"原型模式结构","id":"原型模式结构","index":"1.2"},{"title":"原型模式实现方法","id":"原型模式实现方法","index":"1.3"},{"title":"原型模式扩展","id":"原型模式扩展","index":"1.4"}]}],"reward":true,"copyright":{"author":"Yang Dexuan","link":"<a href=\"http://alpac.top/articles/64779/\" title=\"设计模式4 原型模式\">http://alpac.top/articles/64779/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}