{"title":"设计模式2 UML类图与时序图简介","date":"2019-11-22T06:34:45.000Z","date_formatted":{"ll":"2019年11月22日","L":"2019/11/22","MM-DD":"11-22"},"color":"#EBF8FF","link":"设计模式2UML类图与时序图简介","comments":true,"tags":["设计模式"],"categories":["设计模式"],"updated":"2019-12-03T11:04:16.063Z","content":"<h1 id=\"设计模式2-UML类图与时序图简介\">设计模式2 UML类图与时序图简介<a href=\"设计模式2UML类图与时序图简介#设计模式2-UML类图与时序图简介\"></a></h1><h2 id=\"类图\">类图<a href=\"设计模式2UML类图与时序图简介#类图\"></a></h2><h3 id=\"示例\">示例<a href=\"设计模式2UML类图与时序图简介#示例\"></a></h3><p>请看以下这个类图，类之间的关系是我们需要关注的：</p>\n<p><img src=\"https://s2.ax1x.com/2019/11/22/MTHf4e.png\" alt=\"类间关系UML\" class=\"article-img\"></p>\n<ul>\n<li>车的类图结构为&lt;&lt;abstract&gt;&gt;，表示车是一个抽象类；</li>\n<li>其他的类为实体类。</li>\n</ul>\n<h3 id=\"成员\">成员<a href=\"设计模式2UML类图与时序图简介#成员\"></a></h3><p>成员书写规范：</p>\n<pre><code>修饰符 [描述信息] 属性或方法名称([参数]) [：返回类型|类型[ = 默认值]]。</code></pre><p>UML类图中类成员（即任何属性或方法）的可见性由下列符号所示：</p>\n<ul>\n<li><kbd>-</kbd>：共有</li>\n<li><kbd>+</kbd>：私有</li>\n<li><kbd>#</kbd>：收保护</li>\n<li><kbd>~</kbd>：包</li>\n<li><kbd>/</kbd>：推导</li>\n<li><kbd>__</kbd>：静态</li>\n</ul>\n<ul>\n<li><kbd><< >></kbd>：描述信息</li>\n</ul>\n<h3 id=\"类间关系\">类间关系<a href=\"设计模式2UML类图与时序图简介#类间关系\"></a></h3><ul>\n<li><p><strong>继承关系</strong>：类的继承结构表现在UML中为：泛化与实现：</p>\n<p>继承关系为 <strong>is-a</strong> 的关系，两个对象之间如果可以用 is-a 来表示，就是继承关系；</p>\n<ul>\n<li><p><strong>实现关系（realize）</strong>：车有两个继承类：小汽车和自行车，它们之间的关系为实现关系；</p>\n<p>它是一种类与接口（抽象类）的关系, 表示类是接口（抽象类）所有特征和行为的实现；</p>\n<p>使用带空心箭头的虚线表示，箭头指向接口（抽象类）；</p>\n<p>最终代码体现为继承接口（抽象类）。</p>\n</li>\n<li><p><strong>泛化关系（generalization）</strong>：小汽车为与SUV之间是继承关系，它们之间的关系为泛化关系；</p>\n<p>它表示一般与特殊的关系, 指定了子类如何特化父类的所有特征和行为；</p>\n<p>使用带空心箭头的实线表示，箭头指向父类；</p>\n<p>最终代码体现为继承非接口（抽象类）。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>组合关系（composition）</strong>：小汽车与发动机、小汽车与轮胎之间是组合关系；</p>\n<p>组合关系为 <strong>is-a-part-of</strong> 关系，它是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；</p>\n<p>使用带实心菱形的实线表示，菱形指向整体；</p>\n<p>最终代码体现为成员变量。</p>\n</li>\n<li><p><strong>聚合关系（aggregation）</strong>：学生与班级之间是聚合关系；</p>\n<p>聚合关系为 <strong>owns-a</strong> 关系，与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；</p>\n<p>使用带空心菱形的实线表示，菱形指向整体；</p>\n<p>最终代码体现为成员变量。</p>\n</li>\n<li><p><strong>关联关系（association）</strong>：学生与身份证、学生与老师之间为关联关系；</p>\n<p>关联关系为 <strong>has-a</strong> 的关系，它描述不同类的对象之间的结构关系，是一种静态关系，通常与运行状态无关，一般由常识等因素决定的，因此是一种“强关联”的关系；</p>\n<p>用带普通箭头的实线表示，关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头，指向被拥有者；</p>\n<p>最终代码体现为成员变量，通常将一个类的对象作为另一个类的成员变量。</p>\n</li>\n<li><p><strong>依赖关系（dependency）</strong>：学生上学需要用到自行车，与自行车是一种依赖关系；</p>\n<p>依赖关系为 <strong>uses-a</strong> 的关系，即一个对象在运行期间会用到另一个对象的关系，与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化，依赖关系也可能发生变化；</p>\n<p>使用带箭头的虚线表示，指向被使用者，显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们应该保持单向依赖，杜绝双向依赖的产生；</p>\n<p>最终代码体现为局部变量、方法的参数或者对静态方法的调用。</p>\n</li>\n</ul>\n<p>各种关系的强弱顺序：</p>\n<p>  泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖  </p>\n<h2 id=\"时序图\">时序图<a href=\"设计模式2UML类图与时序图简介#时序图\"></a></h2><p>为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；</p>\n<p>时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。</p>\n<p>时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。</p>\n","prev":{"title":"设计模式3 单例模式","link":"设计模式3单例模式"},"next":{"title":"设计模式1 设计模式概述","link":"设计模式1设计模式概述"},"plink":"http://alpac.top/设计模式2UML类图与时序图简介/","toc":[{"title":"设计模式2 UML类图与时序图简介","id":"设计模式2-UML类图与时序图简介","index":"1","children":[{"title":"类图","id":"类图","index":"1.1","children":[{"title":"示例","id":"示例","index":"1.1.1"},{"title":"成员","id":"成员","index":"1.1.2"},{"title":"类间关系","id":"类间关系","index":"1.1.3"}]},{"title":"时序图","id":"时序图","index":"1.2"}]}],"reward":true,"copyright":{"author":"Yang Dexuan","link":"<a href=\"http://alpac.top/设计模式2UML类图与时序图简介/\" title=\"设计模式2 UML类图与时序图简介\">http://alpac.top/设计模式2UML类图与时序图简介/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}