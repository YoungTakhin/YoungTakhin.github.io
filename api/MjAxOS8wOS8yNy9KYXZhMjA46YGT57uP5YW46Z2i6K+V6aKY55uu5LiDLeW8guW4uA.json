{"title":"Java208道经典面试题目七. 异常","date":"2019-09-27T04:03:30.000Z","date_formatted":{"ll":"2019年9月27日","L":"2019/09/27","MM-DD":"09-27"},"color":"#EBF8FF","link":"2019/09/27/Java208道经典面试题目七-异常","comments":true,"tags":["Java"],"categories":["Java208道经典面试题目"],"updated":"2019-12-03T08:01:59.594Z","content":"<h1 id=\"Java208道经典面试题目七-异常\">Java208道经典面试题目七. 异常<a href=\"2019/09/27/Java208道经典面试题目七-异常#Java208道经典面试题目七-异常\"></a></h1><h2 id=\"74-throw-和-throws-的区别？\">74. throw 和 throws 的区别？<a href=\"2019/09/27/Java208道经典面试题目七-异常#74-throw-和-throws-的区别？\"></a></h2><p>throws是用来声明一个方法可能抛出的所有异常信息，throws是将异常声明但是不处理，而是将异常往上传，谁调用我就交给谁处理。而throw则是指抛出的一个具体的异常类型。</p>\n<h2 id=\"75-final、finally、finalize-有什么区别？\">75. final、finally、finalize 有什么区别？<a href=\"2019/09/27/Java208道经典面试题目七-异常#75-final、finally、finalize-有什么区别？\"></a></h2><ul>\n<li>final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。</li>\n<li>finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。</li>\n<li>finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类，该方法一般由垃圾回收器来调用，当我们调用System的gc()方法的时候，由垃圾回收器调用finalize(),回收垃圾。 </li>\n</ul>\n<h2 id=\"76-try-catch-finally-中哪个部分可以省略？\">76. try-catch-finally 中哪个部分可以省略？<a href=\"2019/09/27/Java208道经典面试题目七-异常#76-try-catch-finally-中哪个部分可以省略？\"></a></h2><p>catch 可以省略。</p>\n<p><strong>原因：</strong></p>\n<p>更为严格的说法其实是：try只适合处理运行时异常，try+catch适合处理运行时异常+普通异常。也就是说，如果你只用try去处理普通异常却不加以catch处理，编译是通不过的，因为编译器硬性规定，普通异常如果选择捕获，则必须用catch显示声明以便进一步处理。而运行时异常在编译时没有如此规定，所以catch可以省略，你加上catch编译器也觉得无可厚非。</p>\n<p>理论上，编译器看任何代码都不顺眼，都觉得可能有潜在的问题，所以你即使对所有代码加上try，代码在运行期时也只不过是在正常运行的基础上加一层皮。但是你一旦对一段代码加上try，就等于显示地承诺编译器，对这段代码可能抛出的异常进行捕获而非向上抛出处理。如果是普通异常，编译器要求必须用catch捕获以便进一步处理；如果运行时异常，捕获然后丢弃并且+finally扫尾处理，或者加上catch捕获以便进一步处理。</p>\n<p>至于加上finally，则是在不管有没捕获异常，都要进行的“扫尾”处理。</p>\n<h2 id=\"77-try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？\">77. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？<a href=\"2019/09/27/Java208道经典面试题目七-异常#77-try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？\"></a></h2><p>会执行，在 return 前执行。</p>\n<p><strong>代码示例1：</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinallyDemo2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(getInt());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getInt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(a / <span class=\"number\">0</span>);</span><br><span class=\"line\">            a = <span class=\"number\">20</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            a = <span class=\"number\">30</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * return a 在程序执行到这一步的时候，这里不是return a 而是 return 30；这个返回路径就形成了</span></span><br><span class=\"line\"><span class=\"comment\">             * 但是呢，它发现后面还有finally，所以继续执行finally的内容，a=40</span></span><br><span class=\"line\"><span class=\"comment\">             * 再次回到以前的路径,继续走return 30，形成返回路径之后，这里的a就不是a变量了，而是常量30</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            a = <span class=\"number\">40</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      return a;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>执行结果：30</p>\n<p><strong>代码示例2：</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinallyDemo2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(getInt());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getInt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(a / <span class=\"number\">0</span>);</span><br><span class=\"line\">            a = <span class=\"number\">20</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;</span><br><span class=\"line\">            a = <span class=\"number\">30</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * return a 在程序执行到这一步的时候，这里不是return a 而是 return 30；这个返回路径就形成了</span></span><br><span class=\"line\"><span class=\"comment\">             * 但是呢，它发现后面还有finally，所以继续执行finally的内容，a=40</span></span><br><span class=\"line\"><span class=\"comment\">             * 再次回到以前的路径,继续走return 30，形成返回路径之后，这里的a就不是a变量了，而是常量30</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            a = <span class=\"number\">40</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> a; <span class=\"comment\">//如果这样，就又重新形成了一条返回路径，由于只能通过1个return返回，所以这里直接返回40</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//      return a;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>执行结果：40</p>\n<h2 id=\"78-常见的异常类有哪些？\">78. 常见的异常类有哪些？<a href=\"2019/09/27/Java208道经典面试题目七-异常#78-常见的异常类有哪些？\"></a></h2><ul>\n<li>NullPointerException：当应用程序试图访问空对象时，则抛出该异常。</li>\n<li>SQLException：提供关于数据库访问错误或其他错误信息的异常。</li>\n<li>IndexOutOfBoundsException：指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。 </li>\n<li>NumberFormatException：当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</li>\n<li>FileNotFoundException：当试图打开指定路径名表示的文件失败时，抛出此异常。</li>\n<li>IOException：当发生某种I/O异常时，抛出此异常。此类是失败或中断的I/O操作生成的异常的通用类。</li>\n<li>ClassCastException：当试图将对象强制转换为不是实例的子类时，抛出该异常。</li>\n<li>ArrayStoreException：试图将错误类型的对象存储到一个对象数组时抛出的异常。</li>\n<li>IllegalArgumentException：抛出的异常表明向方法传递了一个不合法或不正确的参数。</li>\n<li>ArithmeticException：当出现异常的运算条件时，抛出此异常。例如，一个整数“除以零”时，抛出此类的一个实例。 </li>\n<li>NegativeArraySizeException：如果应用程序试图创建大小为负的数组，则抛出该异常。</li>\n<li>NoSuchMethodException：无法找到某一特定方法时，抛出该异常。</li>\n<li>SecurityException：由安全管理器抛出的异常，指示存在安全侵犯。</li>\n<li>UnsupportedOperationException：当不支持请求的操作时，抛出该异常。</li>\n<li>RuntimeExceptionRuntimeException：是那些可能在Java虚拟机正常运行期间抛出的异常的超类。</li>\n</ul>\n","prev":{"title":"Hello World","link":"2019/10/30/hello-world"},"next":{"title":"Java208道经典面试题目六. Java Web","link":"2019/09/27/Java208道经典面试题目六-Java-Web"},"plink":"https://youngtakhin.github.io/youngtakhin.github.io/2019/09/27/Java208道经典面试题目七-异常/","toc":[{"title":"Java208道经典面试题目七. 异常","id":"Java208道经典面试题目七-异常","index":"1","children":[{"title":"74. throw 和 throws 的区别？","id":"74-throw-和-throws-的区别？","index":"1.1"},{"title":"75. final、finally、finalize 有什么区别？","id":"75-final、finally、finalize-有什么区别？","index":"1.2"},{"title":"76. try-catch-finally 中哪个部分可以省略？","id":"76-try-catch-finally-中哪个部分可以省略？","index":"1.3"},{"title":"77. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？","id":"77-try-catch-finally-中，如果-catch-中-return-了，finally-还会执行吗？","index":"1.4"},{"title":"78. 常见的异常类有哪些？","id":"78-常见的异常类有哪些？","index":"1.5"}]}],"reward":true,"copyright":{"author":"Yang Dexuan","link":"<a href=\"https://youngtakhin.github.io/youngtakhin.github.io/2019/09/27/Java208道经典面试题目七-异常/\" title=\"Java208道经典面试题目七. 异常\">https://youngtakhin.github.io/youngtakhin.github.io/2019/09/27/Java208道经典面试题目七-异常/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}