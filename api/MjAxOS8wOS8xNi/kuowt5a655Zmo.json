{"title":"二.容器","date":"2019-09-16T02:49:00.000Z","link":"2019/09/16/二-容器","comments":true,"tags":["Java"],"categories":["Java208道经典面试题目"],"updated":"2019-09-16T04:29:19.447Z","content":"<h1 id=\"二-容器\">二. 容器<a href=\"2019/09/16/二-容器#二-容器\"></a></h1><h2 id=\"18-java-容器都有哪些？\">18. java 容器都有哪些？<a href=\"2019/09/16/二-容器#18-java-容器都有哪些？\"></a></h2><p><img src=\"https://img-1257398142.cos.ap-guangzhou.myqcloud.com/rongqi.webp\" alt=\"Image text\" class=\"article-img\"></p>\n<h2 id=\"19-Collection-和-Collections-有什么区别？\">19. Collection 和 Collections 有什么区别？<a href=\"2019/09/16/二-容器#19-Collection-和-Collections-有什么区别？\"></a></h2><ul>\n<li>java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。</li>\n<li>Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。</li>\n</ul>\n<h2 id=\"20-List、Set、Map-之间的区别是什么？\">20. List、Set、Map 之间的区别是什么？<a href=\"2019/09/16/二-容器#20-List、Set、Map-之间的区别是什么？\"></a></h2><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>比较</th>\n<th>List</th>\n<th>Set</th>\n<th>Map</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>继承接口</td>\n<td>Collection</td>\n<td>Collection</td>\n<td></td>\n</tr>\n<tr>\n<td>常见实现类</td>\n<td>AbstractList（其常用子类有ArrayList、LinkedList、Vector）</td>\n<td>AbstractSet（其常用子类有HashSet、LinkedHashSet、TreeSet）</td>\n<td>HashMap、HashTable</td>\n</tr>\n<tr>\n<td>常见方法</td>\n<td>add()、remove()、clear()、get()、contains()、size()</td>\n<td>add()、remove()、clear()、contains()、size()</td>\n<td>put()、get()、remove()、clear()、containsKey()、containsValue()、keySet()、values()、size()</td>\n</tr>\n<tr>\n<td>元素</td>\n<td>可重复</td>\n<td>不可重复（用equals()判断）</td>\n<td>不可重复</td>\n</tr>\n<tr>\n<td>顺序</td>\n<td>有序</td>\n<td>无序（实际上由HashCode决定）</td>\n<td></td>\n</tr>\n<tr>\n<td>线程安全</td>\n<td>Vector线程安全</td>\n<td></td>\n<td>HashTable线程安全</td>\n</tr>\n</tbody></table></div></div>\n<h2 id=\"21-HashMap-和-Hashtable-有什么区别？\">21. HashMap 和 Hashtable 有什么区别？<a href=\"2019/09/16/二-容器#21-HashMap-和-Hashtable-有什么区别？\"></a></h2><ul>\n<li>hashMap去掉了HashTable 的contains方法，但是加上了containsValue()和containsKey()方法。</li>\n<li>hashTable同步的，而HashMap是非同步的，效率上比hashTable要高。</li>\n<li>hashMap允许空键值，而hashTable不允许。</li>\n</ul>\n<h2 id=\"22-如何决定使用-HashMap-还是-TreeMap？\">22. 如何决定使用 HashMap 还是 TreeMap？<a href=\"2019/09/16/二-容器#22-如何决定使用-HashMap-还是-TreeMap？\"></a></h2><p>对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。</p>\n<h2 id=\"23-说一下-HashMap-的实现原理？\">23. 说一下 HashMap 的实现原理？<a href=\"2019/09/16/二-容器#23-说一下-HashMap-的实现原理？\"></a></h2><p><strong>HashMap概述：</strong> HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 </p>\n<p><strong>HashMap的数据结构：</strong> 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</p>\n<p>当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上。</p>\n<p>需要注意Jdk 1.8中对HashMap的实现做了优化,当链表中的节点数据超过八个之后,该链表会转为红黑树来提高查询效率,从原来的O(n)到O(logn)</p>\n<h2 id=\"24-说一下-HashSet-的实现原理？\">24. 说一下 HashSet 的实现原理？<a href=\"2019/09/16/二-容器#24-说一下-HashSet-的实现原理？\"></a></h2><ul>\n<li>HashSet底层由HashMap实现  </li>\n<li>HashSet的值存放于HashMap的key上  </li>\n<li>HashMap的value统一为PRESENT</li>\n</ul>\n<h2 id=\"25-ArrayList-和-LinkedList-的区别是什么？\">25. ArrayList 和 LinkedList 的区别是什么？<a href=\"2019/09/16/二-容器#25-ArrayList-和-LinkedList-的区别是什么？\"></a></h2><p>最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。</p>\n<h2 id=\"26-如何实现数组和-List-之间的转换？\">26. 如何实现数组和 List 之间的转换？<a href=\"2019/09/16/二-容器#26-如何实现数组和-List-之间的转换？\"></a></h2><ul>\n<li>List转换成为数组：调用ArrayList的toArray方法。</li>\n<li>数组转换成为List：调用Arrays的asList方法。</li>\n</ul>\n<h2 id=\"27-ArrayList-和-Vector-的区别是什么？\">27. ArrayList 和 Vector 的区别是什么？<a href=\"2019/09/16/二-容器#27-ArrayList-和-Vector-的区别是什么？\"></a></h2><ul>\n<li>Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。 </li>\n<li>ArrayList比Vector快，它因为有同步，不会过载。 </li>\n<li>ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。</li>\n</ul>\n<h2 id=\"28-Array-和-ArrayList-有何区别？\">28. Array 和 ArrayList 有何区别？<a href=\"2019/09/16/二-容器#28-Array-和-ArrayList-有何区别？\"></a></h2><ul>\n<li>Array可以容纳基本类型和对象，而ArrayList只能容纳对象。 </li>\n<li>Array是指定大小的，而ArrayList大小是固定的。 </li>\n<li>Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。</li>\n</ul>\n<h2 id=\"29-在-Queue-中-poll-和-remove-有什么区别？\">29. 在 Queue 中 poll()和 remove()有什么区别？<a href=\"2019/09/16/二-容器#29-在-Queue-中-poll-和-remove-有什么区别？\"></a></h2><p>poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。</p>\n<h2 id=\"30-哪些集合类是线程安全的？\">30. 哪些集合类是线程安全的？<a href=\"2019/09/16/二-容器#30-哪些集合类是线程安全的？\"></a></h2><ul>\n<li>vector：就比arraylist多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在web应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。</li>\n<li>statck：堆栈类，先进后出。</li>\n<li>hashtable：就比hashmap多了个线程安全。</li>\n<li>enumeration：枚举，相当于迭代器。</li>\n</ul>\n<h2 id=\"31-迭代器-Iterator-是什么？\">31. 迭代器 Iterator 是什么？<a href=\"2019/09/16/二-容器#31-迭代器-Iterator-是什么？\"></a></h2><p>迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。</p>\n<h2 id=\"32-Iterator-怎么使用？有什么特点？\">32. Iterator 怎么使用？有什么特点？<a href=\"2019/09/16/二-容器#32-Iterator-怎么使用？有什么特点？\"></a></h2><p>Java中的Iterator功能比较简单，并且只能单向移动：</p>\n<ul>\n<li>使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。</li>\n<li>使用next()获得序列中的下一个元素。</li>\n<li>使用hasNext()检查序列中是否还有元素。</li>\n<li>使用remove()将迭代器新返回的元素删除。</li>\n</ul>\n<p>Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。</p>\n<h2 id=\"33-Iterator-和-ListIterator-有什么区别？\">33. Iterator 和 ListIterator 有什么区别？<a href=\"2019/09/16/二-容器#33-Iterator-和-ListIterator-有什么区别？\"></a></h2><ul>\n<li>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。 </li>\n<li>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。 </li>\n<li>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</li>\n</ul>\n<hr>\n","prev":{"title":"杨得轩竞赛、活动列表","link":"2019/09/17/test"},"next":{"title":"一.Java基础","link":"2019/09/15/一-Java基础"},"plink":"https://youngtakhin.github.io/youngtakhin.github.io/2019/09/16/二-容器/","toc":[{"title":"二. 容器","id":"二-容器","index":"1","children":[{"title":"18. java 容器都有哪些？","id":"18-java-容器都有哪些？","index":"1.1"},{"title":"19. Collection 和 Collections 有什么区别？","id":"19-Collection-和-Collections-有什么区别？","index":"1.2"},{"title":"20. List、Set、Map 之间的区别是什么？","id":"20-List、Set、Map-之间的区别是什么？","index":"1.3"},{"title":"21. HashMap 和 Hashtable 有什么区别？","id":"21-HashMap-和-Hashtable-有什么区别？","index":"1.4"},{"title":"22. 如何决定使用 HashMap 还是 TreeMap？","id":"22-如何决定使用-HashMap-还是-TreeMap？","index":"1.5"},{"title":"23. 说一下 HashMap 的实现原理？","id":"23-说一下-HashMap-的实现原理？","index":"1.6"},{"title":"24. 说一下 HashSet 的实现原理？","id":"24-说一下-HashSet-的实现原理？","index":"1.7"},{"title":"25. ArrayList 和 LinkedList 的区别是什么？","id":"25-ArrayList-和-LinkedList-的区别是什么？","index":"1.8"},{"title":"26. 如何实现数组和 List 之间的转换？","id":"26-如何实现数组和-List-之间的转换？","index":"1.9"},{"title":"27. ArrayList 和 Vector 的区别是什么？","id":"27-ArrayList-和-Vector-的区别是什么？","index":"1.10"},{"title":"28. Array 和 ArrayList 有何区别？","id":"28-Array-和-ArrayList-有何区别？","index":"1.11"},{"title":"29. 在 Queue 中 poll()和 remove()有什么区别？","id":"29-在-Queue-中-poll-和-remove-有什么区别？","index":"1.12"},{"title":"30. 哪些集合类是线程安全的？","id":"30-哪些集合类是线程安全的？","index":"1.13"},{"title":"31. 迭代器 Iterator 是什么？","id":"31-迭代器-Iterator-是什么？","index":"1.14"},{"title":"32. Iterator 怎么使用？有什么特点？","id":"32-Iterator-怎么使用？有什么特点？","index":"1.15"},{"title":"33. Iterator 和 ListIterator 有什么区别？","id":"33-Iterator-和-ListIterator-有什么区别？","index":"1.16"}]}],"reward":true,"copyright":{"author":"Yang Dexuan","link":"<a href=\"https://youngtakhin.github.io/youngtakhin.github.io/2019/09/16/二-容器/\" title=\"二.容器\">https://youngtakhin.github.io/youngtakhin.github.io/2019/09/16/二-容器/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}