{"title":"设计模式5 工厂方法模式","date":"2019-12-02T05:57:36.000Z","date_formatted":{"ll":"2019年12月2日","L":"2019/12/02","MM-DD":"12-02"},"color":"#EBF8FF","link":"2019/12/02/设计模式5工厂方法模式","comments":true,"tags":["设计模式"],"categories":["设计模式"],"updated":"2019-12-03T08:03:10.643Z","content":"<h1 id=\"设计模式5-工厂方法模式\">设计模式5 工厂方法模式<a href=\"2019/12/02/设计模式5工厂方法模式#设计模式5-工厂方法模式\"></a></h1><p>工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式，它是一种类创建型模式。</p>\n<h2 id=\"工厂方法模式定义\">工厂方法模式定义<a href=\"2019/12/02/设计模式5工厂方法模式#工厂方法模式定义\"></a></h2><p>定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。这满足创建型模式中所要求的“创建与使用相分离”的特点。<br><strong>我们把被创建的对象称为“产品”，把创建产品的对象称为“工厂”。</strong></p>\n<ul>\n<li><p>工厂方法模式优缺点：</p>\n<p>优点：</p>\n<ul>\n<li>一个调用者想创建一个产品，只需知道其名称即可。</li>\n<li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。</li>\n<li>屏蔽产品的具体实现，调用者只关心产品的接口。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。 </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"工厂方法模式结构\">工厂方法模式结构<a href=\"2019/12/02/设计模式5工厂方法模式#工厂方法模式结构\"></a></h2><ul>\n<li><p>工厂方法模式主要包括以下主要角色：</p>\n<ul>\n<li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct() 来创建产品。</li>\n<li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li>\n<li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li>\n<li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li>\n</ul>\n</li>\n<li><p>工厂方法模式类图：</p>\n<p><img src=\"https://s2.ax1x.com/2019/12/02/QnWfoR.png\" alt=\"工厂方法模式\" class=\"article-img\"></p>\n</li>\n</ul>\n<h2 id=\"工厂方法模式实现方法\">工厂方法模式实现方法<a href=\"2019/12/02/设计模式5工厂方法模式#工厂方法模式实现方法\"></a></h2><ul>\n<li><p>抽象产品类</p>\n<p>抽象产品类提供了产品的接口：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>具体产品类</p>\n<p>具体产品实现了抽象产品中的抽象方法：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"具体产品1显示...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"具体产品2显示...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>抽象工厂类</p>\n<p>抽象工厂提供了产品的生成方法：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">newProduct</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>具体工厂类</p>\n<p>具体工厂实现了产品的生成方法：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory1</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">newProduct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"具体工厂1生成--&gt;具体产品1...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProduct1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory2</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">newProduct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"具体工厂2生成--&gt;具体产品2...\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProduct2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>访问类</p>\n<p>访问类通过调用具体工厂类的方法，从而创建不同<strong>具体产品类的实例</strong>：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//生产产品1</span></span><br><span class=\"line\">        ConcreteFactory1 f1 = <span class=\"keyword\">new</span> ConcreteFactory1();</span><br><span class=\"line\">        f1.newProduct().show();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//生产产品2</span></span><br><span class=\"line\">        ConcreteFactory2 f2 = <span class=\"keyword\">new</span> ConcreteFactory2();</span><br><span class=\"line\">        f2.newProduct().show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ul>\n<h2 id=\"工厂方法模式扩展\">工厂方法模式扩展<a href=\"2019/12/02/设计模式5工厂方法模式#工厂方法模式扩展\"></a></h2><ul>\n<li><p>使用多个工厂方法：在抽象工厂角色中可以定义多个工厂方法，从而使具体工厂角色实现这些不同的工厂方法，这些方法可以包含不同的业务逻辑，以满足对不同的产品对象的需求。</p>\n</li>\n<li><p>产品对象的重复使用：工厂对象将已经创建过的产品保存到一个集合（如数组、List等）中，然后根据客户对产品的请求，对集合进行查询。如果有满足要求的产品对象，就直接将该产品返回客户端；如果集合中没有这样的产品对象，那么就创建一个新的满足要求的产品对象，然后将这个对象在增加到集合中，再返回给客户端。</p>\n</li>\n<li><p>多态性的丧失和模式的退化：如果工厂仅仅返回一个具体产品对象，便违背了工厂方法的用意，发生退化，此时就不再是工厂方法模式了。一般来说，工厂对象应当有一个抽象的父类型，如果工厂等级结构中只有一个具体工厂类的话，抽象工厂就可以省略，也将发生了退化。当只有一个具体工厂，在具体工厂中可以创建所有的产品对象，并且工厂方法设计为静态方法时，工厂方法模式就退化成<strong>简单工厂模式</strong>。</p>\n<p>简单工厂模式如下图所示：</p>\n<p><img src=\"https://s2.ax1x.com/2019/12/02/QnTeh9.png\" alt=\"简单工厂模式\" class=\"article-img\"></p>\n</li>\n</ul>\n","prev":{"title":"设计模式6 抽象工厂模式","link":"2019/12/03/设计模式6抽象工厂模式"},"next":{"title":"设计模式4 原型模式","link":"2019/11/28/设计模式4原型模式"},"plink":"https://youngtakhin.github.io/youngtakhin.github.io/2019/12/02/设计模式5工厂方法模式/","toc":[{"title":"设计模式5 工厂方法模式","id":"设计模式5-工厂方法模式","index":"1","children":[{"title":"工厂方法模式定义","id":"工厂方法模式定义","index":"1.1"},{"title":"工厂方法模式结构","id":"工厂方法模式结构","index":"1.2"},{"title":"工厂方法模式实现方法","id":"工厂方法模式实现方法","index":"1.3"},{"title":"工厂方法模式扩展","id":"工厂方法模式扩展","index":"1.4"}]}],"reward":true,"copyright":{"author":"Yang Dexuan","link":"<a href=\"https://youngtakhin.github.io/youngtakhin.github.io/2019/12/02/设计模式5工厂方法模式/\" title=\"设计模式5 工厂方法模式\">https://youngtakhin.github.io/youngtakhin.github.io/2019/12/02/设计模式5工厂方法模式/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}