{"title":"Spring框架入门三. Spring Bean","date":"2019-12-20T10:07:27.000Z","date_formatted":{"ll":"2019年12月20日","L":"2019/12/20","MM-DD":"12-20"},"color":"#EBF8FF","link":"articles/9cc8ab67","comments":true,"tags":["Java","Spring"],"categories":["Spring框架入门"],"updated":"2019-12-22T13:34:48.397Z","content":"<h1 id=\"Spring框架入门三-Spring-Bean\">Spring框架入门三. Spring Bean<a href=\"articles/9cc8ab67#Spring框架入门三-Spring-Bean\"></a></h1><h2 id=\"Bean\">Bean<a href=\"articles/9cc8ab67#Bean\"></a></h2><p>bean 是被实例化，组装，并通过 Spring IoC 容器所管理的构成应用程序支柱的对象。这些 bean 是由用容器提供的配置元数据创建的</p>\n<p>在容器内部，这些 <strong>bean 定义</strong>被表示为 BeanDefinition 对象，其中包含以下元数据(以及其他信息):</p>\n<ul>\n<li>全限定类名：通常是定义的 bean 的实际实现类。</li>\n<li>bean 行为配置元素：它表示 bean 在容器中的行为(范围、生命周期回调，等等)。</li>\n<li>依赖：对该 bean 执行其工作所需的其他 bean 的引用。</li>\n<li>新创建的对象中的其他配置设置：例如，池的大小限制或管理连接池的 bean 中使用的连接数。</li>\n</ul>\n<p>上述所有的配置元数据转换成一组构成每个 <strong>bean 定义</strong>的下列属性：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Class</td>\n<td>这个属性是强制性的，并且指定用来创建 bean 的 bean 类</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>这个属性指定唯一的 bean 标识符；在基于 XML 的配置元数据中，可以使用 id 和/或 name 属性来指定 bean 标识符</td>\n</tr>\n<tr>\n<td>Scope</td>\n<td>这个属性指定由特定的 bean 定义创建的对象的作用域</td>\n</tr>\n<tr>\n<td>Constructor arguments</td>\n<td>依赖注入</td>\n</tr>\n<tr>\n<td>Properties</td>\n<td>依赖注入</td>\n</tr>\n<tr>\n<td>Autowiring mode</td>\n<td>自动装配</td>\n</tr>\n<tr>\n<td>Lazy initialization mode</td>\n<td>延迟初始化的 bean ，告诉 IoC 容器在它第一次被请求时创建，而不是在启动时创建一个 bean 实例</td>\n</tr>\n<tr>\n<td>Initialization method</td>\n<td>在 bean 的所有必需的属性被容器设置之后，调用回调方法</td>\n</tr>\n<tr>\n<td>Destruction method</td>\n<td>当包含该 bean 的容器被销毁时，使用回调方法</td>\n</tr>\n</tbody></table></div></div>\n<h2 id=\"创建Bean对象的三种方式\">创建Bean对象的三种方式<a href=\"articles/9cc8ab67#创建Bean对象的三种方式\"></a></h2><ul>\n<li>使用默认构造方法创建</li>\n<li>使用普通工厂中的方法创建</li>\n<li>使用工厂中的静态方法创建</li>\n</ul>\n<h2 id=\"Bean作用域\">Bean作用域<a href=\"articles/9cc8ab67#Bean作用域\"></a></h2><p>当在 Spring 中定义一个 bean 时，你必须声明该 bean 的作用域的选项。</p>\n<p>Spring 框架支持以下五个作用域：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>singleton</td>\n<td>在 Spring IoC 容器仅存在一个 Bean 实例，Bean 以单例方式存在，默认值</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>每次从容器中调用 Bean 时，都返回一个新的实例，即每次调用 getBean() 时，相当于执行 newXxxBean()</td>\n</tr>\n<tr>\n<td>request</td>\n<td>每次 HTTP 请求都会创建一个新的 Bean，该作用域仅适用于 WebApplicationContext 环境</td>\n</tr>\n<tr>\n<td>session</td>\n<td>同一个 HTTP Session 共享一个 Bean，不同 Session 使用不同的Bean，仅适用于 WebApplicationContext 环境</td>\n</tr>\n<tr>\n<td>global-session</td>\n<td>一般用于 Portlet 应用环境，该运用域仅适用于 WebApplicationContext 环境</td>\n</tr>\n</tbody></table></div></div>\n<h2 id=\"Bean生命周期\">Bean生命周期<a href=\"articles/9cc8ab67#Bean生命周期\"></a></h2>","next":{"title":"Spring框架入门二. Spring IoC容器","link":"articles/865c5d02"},"plink":"http://alpac.top/articles/9cc8ab67/","toc":[{"title":"Spring框架入门三. Spring Bean","id":"Spring框架入门三-Spring-Bean","index":"1","children":[{"title":"Bean","id":"Bean","index":"1.1"},{"title":"创建Bean对象的三种方式","id":"创建Bean对象的三种方式","index":"1.2"},{"title":"Bean作用域","id":"Bean作用域","index":"1.3"},{"title":"Bean生命周期","id":"Bean生命周期","index":"1.4"}]}],"reward":true,"copyright":{"author":"Yang Dexuan","link":"<a href=\"http://alpac.top/articles/9cc8ab67/\" title=\"Spring框架入门三. Spring Bean\">http://alpac.top/articles/9cc8ab67/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}