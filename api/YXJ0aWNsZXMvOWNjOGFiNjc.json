{"title":"Spring框架入门3. Spring Bean","date":"2019-12-20T10:07:27.000Z","date_formatted":{"ll":"2019年12月20日","L":"2019/12/20","MM-DD":"12-20"},"color":"#EBF8FF","link":"articles/9cc8ab67","comments":true,"tags":["Java","Spring"],"categories":["Spring框架入门"],"updated":"2019-12-26T16:01:28.563Z","content":"<h1 id=\"Spring框架入门3-Spring-Bean\">Spring框架入门3. Spring Bean<a href=\"articles/9cc8ab67#Spring框架入门3-Spring-Bean\"></a></h1><h2 id=\"Bean\">Bean<a href=\"articles/9cc8ab67#Bean\"></a></h2><p>bean 是被实例化，组装，并通过 Spring IoC 容器所管理的构成应用程序支柱的对象。这些 bean 是由用容器提供的配置元数据创建的</p>\n<p>在容器内部，这些 <strong>bean 定义</strong>被表示为 <code>BeanDefinition</code> 对象，其中包含以下元数据(以及其他信息):</p>\n<ul>\n<li>全限定类名：通常是定义的 bean 的实际实现类。</li>\n<li>bean 行为配置元素：它表示 bean 在容器中的行为(范围、生命周期回调，等等)。</li>\n<li>依赖：对该 bean 执行其工作所需的其他 bean 的引用。</li>\n<li>新创建的对象中的其他配置设置：例如，池的大小限制或管理连接池的 bean 中使用的连接数。</li>\n</ul>\n<p>上述所有的配置元数据转换成一组构成每个 <strong>bean 定义</strong>的下列属性：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Class</td>\n<td>这个属性是强制性的，并且指定用来创建 bean 的 bean 类</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>这个属性指定唯一的 bean 标识符；在基于 XML 的配置元数据中，可以使用 id 和/或 name 属性来指定 bean 标识符</td>\n</tr>\n<tr>\n<td>Scope</td>\n<td>这个属性指定由特定的 bean 定义创建的对象的作用域</td>\n</tr>\n<tr>\n<td>Constructor arguments</td>\n<td>依赖注入</td>\n</tr>\n<tr>\n<td>Properties</td>\n<td>依赖注入</td>\n</tr>\n<tr>\n<td>Autowiring mode</td>\n<td>自动装配</td>\n</tr>\n<tr>\n<td>Lazy initialization mode</td>\n<td>延迟初始化的 bean ，告诉 IoC 容器在它第一次被请求时创建，而不是在启动时创建一个 bean 实例</td>\n</tr>\n<tr>\n<td>Initialization method</td>\n<td>在 bean 的所有必需的属性被容器设置之后，调用回调方法</td>\n</tr>\n<tr>\n<td>Destruction method</td>\n<td>当包含该 bean 的容器被销毁时，使用回调方法</td>\n</tr>\n</tbody></table></div></div>\n<h2 id=\"创建Bean对象的三种方式\">创建Bean对象的三种方式<a href=\"articles/9cc8ab67#创建Bean对象的三种方式\"></a></h2><p>编写 service 层接口及其实现类作为测试用例：</p>\n<figure class=\"highlight\"><figcaption><span>AccountService.java</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ydx.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 账户业务层的接口</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AccountService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 模拟保存账户</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">saveAccount</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><figcaption><span>AccountServiceImpl.java</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ydx.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ydx.service.AccountService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 账户的业务层实现类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">AccountService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AccountServiceImpl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"AccountServiceImpl对象创建了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">saveAccount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"service中的saveAccount()方法执行了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight\"><figcaption><span>BaseTest.java</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ydx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ydx.service.AccountService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取Spring的IoC核心容器，并根据id获取对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1 获取核心容器对象</span></span><br><span class=\"line\">        ApplicationContext ac = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2 根据id获取bean对象</span></span><br><span class=\"line\">        AccountService as = (AccountService) ac.getBean(<span class=\"string\">\"accountService\"</span>);</span><br><span class=\"line\">        as.saveAccount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><p>使用默认构造方法创建：</p>\n<p>它会根据默认无参构造方法来创建类对象。</p>\n<blockquote>\n<p>如果 bean 中没有默认无参构造方法，将会创建失败。</p>\n</blockquote>\n<ol>\n<li><p>在配置文件中添加标签</p>\n<figure class=\"highlight\"><figcaption><span>applicationContext.xml</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"accountService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.ydx.service.impl.AccountServiceImpl\"</span>/&gt;</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>运行结果</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AccountServiceImpl对象创建了</span><br><span class=\"line\">service中的saveAccount()方法执行了</span><br></pre></td></tr></table></div></figure>\n</li>\n</ol>\n</li>\n<li><p>使用普通工厂中的方法创建</p>\n<p>使用某个类中的方法创建对象并存入 Spring 容器。</p>\n<ol>\n<li><p>模拟工厂类</p>\n<blockquote>\n<p>实际情况下，该类有可能存在于 jar 包中，我们无法通过修改源码的方式来提供默认构造方法。</p>\n</blockquote>\n<figure class=\"highlight\"><figcaption><span>InstanceFactory.java</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ydx.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ydx.service.AccountService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ydx.service.impl.AccountServiceImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstanceFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> AccountService <span class=\"title\">getAccountService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AccountServiceImpl();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>在配置文件中添加标签</p>\n<figure class=\"highlight\"><figcaption><span>applicationContext.xml</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"instanceFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.ydx.factory.InstanceFactory\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"accountService\"</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">\"instanceFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getAccountService\"</span> /&gt;</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>factory-bean 属性指定了工厂类。<br>factroy-method 属性指定使用哪一个方法获取对象。</p>\n</blockquote>\n</li>\n<li><p>运行结果</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AccountServiceImpl对象创建了</span><br><span class=\"line\">service中的saveAccount()方法执行了</span><br></pre></td></tr></table></div></figure>\n</li>\n</ol>\n</li>\n<li><p>使用工厂中的静态方法创建</p>\n<p>使用某个类中的静态方法创建对象并存入 Spring 容器。</p>\n<ol>\n<li><p>模拟工厂类</p>\n<blockquote>\n<p>实际情况下，该类有可能存在于 jar 包中，我们无法通过修改源码的方式来提供默认构造方法。</p>\n</blockquote>\n<figure class=\"highlight\"><figcaption><span>StaticFactory.java</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ydx.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ydx.service.AccountService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ydx.service.impl.AccountServiceImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AccountService <span class=\"title\">getAccountService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AccountServiceImpl();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>在配置文件中添加标签</p>\n<figure class=\"highlight\"><figcaption><span>applicationContext.xml</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"accountService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.ydx.factory.StaticFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getAccountService\"</span>/&gt;</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>运行结果</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AccountServiceImpl对象创建了</span><br><span class=\"line\">service中的saveAccount()方法执行了</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Bean作用域和生命周期\">Bean作用域和生命周期<a href=\"articles/9cc8ab67#Bean作用域和生命周期\"></a></h2><h3 id=\"Bean作用域\">Bean作用域<a href=\"articles/9cc8ab67#Bean作用域\"></a></h3><p>当在 Spring 中定义一个 bean 时，你必须在 <strong>scope 属性</strong>中声明该 bean 的作用域的选项。</p>\n<p>Spring 框架支持以下几个作用域：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>singleton</td>\n<td>在 Spring IoC 容器仅存在一个 bean 实例，bean 以单例方式存在，默认值</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>每次从容器中调用 bean 时，都返回一个新的实例，即每次调用 <code>getBean()</code> 时，相当于执行 <code>newXxxBean()</code></td>\n</tr>\n<tr>\n<td>request</td>\n<td>每次 HTTP 请求都会创建一个新的 bean，该作用域仅适用于 <code>ApplicationContext</code> 环境</td>\n</tr>\n<tr>\n<td>session</td>\n<td>同一个 HTTP Session 共享一个 bean，不同 Session 使用不同的 bean，仅适用于 <code>ApplicationContext</code> 环境</td>\n</tr>\n<tr>\n<td>application</td>\n<td>将一个 bean 定义作用于 <code>ServletContext</code> 的生命周期，该作用域仅适用于 <code>ApplicationContext</code> 环境</td>\n</tr>\n<tr>\n<td>websocket</td>\n<td>将一个 bean 定义作用于 WebSocket 的生命周期，该作用域仅适用于 <code>ApplicationContext</code> 环境</td>\n</tr>\n</tbody></table></div></div>\n<blockquote>\n<p>常用 singleton 和 prototype</p>\n</blockquote>\n<h3 id=\"Bean生命周期\">Bean生命周期<a href=\"articles/9cc8ab67#Bean生命周期\"></a></h3><p>在 <code>bean</code> 标签中使用 <code>init-method</code> 属性来指定在 bean 初始化时执行的方法，使用 <code>destroy-method</code> 属性来指定在 bean 销毁时执行的方法，</p>\n<p>为了方便观察，在 <code>AccountServiceImpl</code> 中添加 <code>init()</code> 和 <code>destroy()</code> 方法。</p>\n<figure class=\"highlight\"><figcaption><span>AccountServiceImpl.java</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ydx.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ydx.service.AccountService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 账户的业务层实现类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">AccountService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AccountServiceImpl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"AccountServiceImpl对象创建了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">saveAccount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"service中的saveAccount()方法执行了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"AccountServiceImpl对象初始化了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"AccountServiceImpl对象销毁了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>测试类：</p>\n<figure class=\"highlight\"><figcaption><span>BaseTest.java</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ydx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ydx.service.AccountService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取Spring的IoC核心容器，并根据id获取对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取核心容器对象</span></span><br><span class=\"line\">        ClassPathXmlApplicationContext ac = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据id获取bean对象</span></span><br><span class=\"line\">        AccountService as = (AccountService) ac.getBean(<span class=\"string\">\"accountService\"</span>);</span><br><span class=\"line\">        as.saveAccount();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//关闭容器</span></span><br><span class=\"line\">        ac.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li><p>单例对象：<code>scope=&quot;singleton&quot;</code></p>\n<p>一个应用只有一个对象的实例。它的作用范围就是整个引用。</p>\n<p>生命周期：</p>\n<ul>\n<li>对象出生：当应用加载，创建容器时，对象就被创建了。</li>\n<li>对象存活：只要容器在，对象一直存活。</li>\n<li>对象死亡：当应用卸载，销毁容器时，对象就被销毁了。</li>\n</ul>\n<p>配置文件：</p>\n<figure class=\"highlight\"><figcaption><span>applicationContext.xml</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"accountService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.ydx.service.impl.AccountServiceImpl\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"singleton\"</span> <span class=\"attr\">init-method</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"destroy\"</span>/&gt;</span></span><br><span class=\"line\">  </span><br></pre></td></tr></table></div></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AccountServiceImpl对象创建了</span><br><span class=\"line\">AccountServiceImpl对象初始化了</span><br><span class=\"line\">service中的saveAccount()方法执行了</span><br><span class=\"line\">AccountServiceImpl对象销毁了</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>容器关闭时，对象也就被销毁了</p>\n</blockquote>\n</li>\n<li><p>多例对象：<code>scope=&quot;prototype&quot;</code></p>\n<p>每次访问对象时，都会重新创建对象实例。</p>\n<p>生命周期：</p>\n<ul>\n<li>对象出生：当使用对象时，创建新的对象实例。</li>\n<li>对象存活：只要对象在使用中，就一直存活。</li>\n<li>对象死亡：当对象长时间不用时，被 Java 的垃圾回收器回收了。 </li>\n</ul>\n<p>配置文件：</p>\n<figure class=\"highlight\"><figcaption><span>applicationContext.xml</span></figcaption><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"accountService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.ydx.service.impl.AccountServiceImpl\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span> <span class=\"attr\">init-method</span>=<span class=\"string\">\"init\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"destroy\"</span>/&gt;</span></span><br><span class=\"line\">  </span><br></pre></td></tr></table></div></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AccountServiceImpl对象创建了</span><br><span class=\"line\">AccountServiceImpl对象初始化了</span><br><span class=\"line\">service中的saveAccount()方法执行了</span><br></pre></td></tr></table></div></figure>\n\n<blockquote>\n<p>即使关闭了容器，对象还会一直存在</p>\n</blockquote>\n</li>\n</ul>\n","prev":{"title":"Spring框架入门4. Spring依赖注入","link":"articles/a9caf4f0"},"next":{"title":"Spring框架入门2. Spring IoC容器","link":"articles/865c5d02"},"plink":"http://alpac.top/articles/9cc8ab67/","toc":[{"title":"Spring框架入门3. Spring Bean","id":"Spring框架入门3-Spring-Bean","index":"1","children":[{"title":"Bean","id":"Bean","index":"1.1"},{"title":"创建Bean对象的三种方式","id":"创建Bean对象的三种方式","index":"1.2"},{"title":"Bean作用域和生命周期","id":"Bean作用域和生命周期","index":"1.3","children":[{"title":"Bean作用域","id":"Bean作用域","index":"1.3.1"},{"title":"Bean生命周期","id":"Bean生命周期","index":"1.3.2"}]}]}],"reward":true,"copyright":{"author":"Yang Dexuan","link":"<a href=\"http://alpac.top/articles/9cc8ab67/\" title=\"Spring框架入门3. Spring Bean\">http://alpac.top/articles/9cc8ab67/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}